"""
To do:

- different number of particles simulation
- error shit
- make plots pretty



"""


import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.function_base import average

#Details
t_max = 0.2  # simulation time in seconds
dt = 0.001  # step size
N = 2**15 # Number of particles
N2 = N/(2**3)
N3 = N2/(2**3)
D = 0.1  # diffsivity
Nx = 64 #Euler grid size
ones = np.ones(N)  # Array of ones for where function
zeros = np.zeros(N)  # Array of zeros for where function

# Domain size
x_min = -1
x_max = 1

ref = np.genfromtxt('reference_solution_1D.dat')
x = np.random.uniform(x_min, x_max, size=N)  # initial x-positions
phi = np.where(x <= 0, ones, zeros) #give x coordinates phi values


x, phi = zip(*sorted(zip(x,phi))) #sorts x into ascending order
x_phi = np.column_stack((x,phi)) #stack x against phi


for i in np.arange(0, t_max, dt):
    x_phi[:,0] += np.sqrt(2 * D * dt) * np.random.normal(0, 1, size=N) #diffusion calulation
    x_phi[:,0][x_phi[:,0] < x_min] = x_min  #any values in x thats under x_min replace to x_min
    x_phi[:,0][x_phi[:,0] > x_max] = x_max #any values in x thats over x_max replace to x_max


x_phi = x_phi[x_phi[:,0].argsort()] #sort new x_phi into ascending
phi_splits = np.split(x_phi[:,1], Nx) #split phi values so average can be taken

avrphi = []
for i in range(Nx):
    average	= np.cumsum(phi_splits[i])[-1]/len(phi_splits[i]) #calculate averag at Nx points
    avrphi.append(average)

#plot
plt.plot(ref[:, 0], ref[:, 1], color='g')
plt.plot(np.linspace(x_min,x_max, Nx), avrphi, marker='.', color='b')
plt.show()