"""
To do:

- sest boudaries for x within x_min and x_max
- different number of particles simulation
- error shit
- make plots pretty



"""


import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.function_base import average

#Details
t_max = 0.2  # simulation time in seconds
dt = 0.001  # step size
N = 2**10 # Number of particles
D = 0.1  # diffusivity
Nx = 64 #Euler grid size
ones = np.ones(N)  # Array of ones for where function
zeros = np.zeros(N)  # Array of zeros for where function
blue = np.full(N, 'b')  # Array of blue for where function
red = np.full(N, 'r')  # Array of red for where function

# Domain size
x_min = -1
x_max = 1

ref = np.genfromtxt('reference_solution_1D.dat')
x = np.random.uniform(x_min, x_max, size=N)  # initial x-positions
phi = np.where(x <= 0, ones, zeros) #give x coordinates phi values

x, phi = zip(*sorted(zip(x,phi))) #sorts x into ascending order
x_phi = np.column_stack((x,phi)) #stack x against phi


for i in np.arange(0, t_max, dt):
    x_phi[:,0] += np.sqrt(2 * D * dt) * np.random.normal(0, 1, size=N) #diffusion calulation
    


x_phi = x_phi[x_phi[:,0].argsort()] #sort new x_phi into ascending
 
phi_splits = np.split(x_phi[:,1], Nx) #split phi values so average can be taken


avrphi = []
for i in range(Nx):
    average	= np.cumsum(phi_splits[i])[-1]/len(phi_splits[i]) #calculate averag at Nx points
    avrphi.append(average)

#plot
plt.plot(ref[:, 0], ref[:, 1], color='g')
plt.plot(np.linspace(x_min,x_max, Nx), avrphi, marker='.', color='b')
plt.show()

# x_gran = np.round((x - x_min) / (x_max - x_min) * (Nx - 1)).astype(int)
# print(x_gran)
# unq, ids, count = np.unique(x_gran, return_inverse=True, return_counts=True, axis=0)        
# print(unq, ids, count)


# def getavrphimesh():
#     x_gran = np.round((x - x_min) / (x_max - x_min) * (Nx - 1)).astype(int)  
#     unq, ids, count = np.unique(x_gran, return_inverse=True, return_counts=True, axis=0)        
#     avrphi = np.bincount(ids, phi) / count
#     return avrphi

# for i in np.arange(0, t_max, dt):
#     #avphi = getavrphimesh()
#     plt.plot(ref[:, 0], ref[:, 1], color='g')
#     # plt.scatter(np.linspace(x_min, x_max, Nx), avphi[0], s=15, marker='.', color='b')
#     # plt.plot(np.linspace(x_min, x_max, Nx), avphi[0], color='b')
#     # plt.show()
#     x += np.sqrt(2 * D * dt) * np.random.normal(0, 1, size=N)
#     print(x)